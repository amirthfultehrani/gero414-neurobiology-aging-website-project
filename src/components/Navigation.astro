---
// src/components/Navigation.astro
// --- Configuration & Data ---
const base = import.meta.env.BASE_URL; // Base URL from Astro config.

// Defines the structure and content for navigation links.
// Includes href, display text, and SVG icon markup for desktop view.
// Ensure these icons meet accessibility and design requirements.
const navLinks = [
  { href: `${base}/`, text: 'Home', icon: `<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 16 16" fill="currentColor" class="w-4 h-4"><path d="M6.75 1.5a.75.75 0 0 0-1.5 0v1.466a3.5 3.5 0 0 0-3.119 2.93l-1.075.179a.75.75 0 0 0-.624.831l.57 3.417a.75.75 0 0 0 .831.624l1.075-.179A3.5 3.5 0 0 0 6 12.533V14.5a.75.75 0 0 0 1.5 0v-1.967a3.5 3.5 0 0 0 3.119-2.93l1.075-.179a.75.75 0 0 0 .624-.831l-.57-3.417a.75.75 0 0 0-.831-.624l-1.075.179A3.5 3.5 0 0 0 10 3.034V1.5a.75.75 0 0 0-1.5 0v1.466a3.503 3.503 0 0 0-1.75 0V1.5Z" /></svg>` },
  { href: `${base}/about/`, text: 'About'},
  { href: `${base}/understanding-ad/`, text: 'Understanding AD'},
  { href: `${base}/diagnosis/`, text: 'Diagnosis'},
  { href: `${base}/treatment/`, text: 'Treatment'},
  { href: `${base}/resources/`, text: 'Resources'},
  { href: `${base}/references/`, text: 'References'},
  { href: `${base}/ai-use/`, text: 'AI Use'},
  { href: `${base}/contact/`, text: 'Contact'},
];

/**
 * Determines if a navigation link should be marked as active based on the current page path.
 * Handles trailing slashes and checks for homepage/nested paths correctly.
 * @param {string} currentPath - The pathname of the current page (e.g., Astro.url.pathname).
 * @param {string} linkHref - The href attribute of the navigation link being checked.
 * @returns {boolean} True if the link corresponds to the current page or its parent section.
 */
function isActive(currentPath: string, linkHref: string): boolean {
  // Ensure paths end with a slash for consistent comparison, avoiding partial matches.
  const normalizedCurrentPath = currentPath.endsWith('/') ? currentPath : `${currentPath}/`;
  const normalizedLinkHref = linkHref.endsWith('/') ? linkHref : `${linkHref}/`;

  // The homepage link requires an exact match with the base URL or the development index page.
  if (linkHref === `${base}/`) {
    return normalizedCurrentPath === `${base}/` || currentPath === `${base}/index.html`;
  }

  // For other pages, check if the current path *starts with* the link's path.
  // Correctly highlights parent sections when viewing child pages (e.g., '/about/' active on '/about/team/').
  return normalizedCurrentPath.startsWith(normalizedLinkHref);
}

// Gets the current page's pathname from the Astro global object.
const currentPath = Astro.url.pathname;
---

{/* Mobile Navigation Flyout Menu */}
{/* Initially hidden, visibility and animations controlled by public/scripts/menu.js */}
<div
  id="nav-links"
  aria-label="Mobile Navigation"
  class="nav-links hidden absolute top-full left-0 z-40 mt-px w-full origin-top transform flex-col space-y-1 border-t border-slate-300 bg-white p-4 shadow-lg opacity-0 transition-all duration-300 ease-in-out dark:border-slate-700 dark:bg-slate-800 md:hidden"
>
  {/* Loop through defined navigation links to generate menu items */}
  {navLinks.map(link => {
    // Determine if the current link should be marked as active.
    const active = isActive(currentPath, link.href);
    return (
      <a
        href={link.href}
        aria-current={active ? 'page' : undefined}
        class:list={[
          // Base styling for all mobile links.
          "block w-full rounded-md px-3 py-2.5 text-left text-base font-medium transition duration-150 ease-in-out",
          // Focus styling for keyboard navigation. Ring is inset for better visibility within the flyout.
          "focus:outline-none focus-visible:ring-2 focus-visible:ring-inset focus-visible:ring-blue-500 dark:focus-visible:ring-blue-400",
          // Conditional styling: Apply distinct background and text colors for the active link.
          active
            ? 'bg-blue-100 font-semibold text-blue-700 dark:bg-blue-900/50 dark:text-blue-300'
            // Default and hover styling for non-active links. Ensures good contrast.
            : 'text-slate-800 hover:bg-slate-100 hover:text-slate-900 dark:text-slate-200 dark:hover:bg-slate-700 dark:hover:text-white'
        ]}
      >
        {link.text} {/* Display the link text */}
      </a>
    );
  })}
</div>

{/* Desktop Navigation Bar */}
{/* Hidden on mobile (md:hidden), displayed as flex row on medium screens and up */}
<nav class="hidden md:flex md:items-center md:space-x-1 lg:space-x-2" aria-label="Main Navigation">
  {/* Loop through defined navigation links */}
  {navLinks.map(link => {
    // Determine if the current link should be marked as active.
    const active = isActive(currentPath, link.href);
    return (
      <a
        href={link.href}
        aria-current={active ? 'page' : undefined}
        class:list={[
          // Base styling: flex container for icon and text, padding, font size, etc.
          "group flex items-center gap-x-1.5 rounded-md px-3 py-2 text-sm font-medium transition duration-150 ease-in-out",
          // Focus styling for desktop, using offset for better visibility against the header background.
          "focus:outline-none focus-visible:ring-2 focus-visible:ring-blue-500 focus-visible:ring-offset-2 dark:focus-visible:ring-blue-400 dark:focus-visible:ring-offset-slate-900",
          // Conditional styling for the active link on desktop.
          active
            ? 'bg-slate-200 text-blue-700 dark:bg-slate-700 dark:text-blue-300' // Adjusted active state for better contrast
            // Default and hover styling for non-active desktop links. Ensures high contrast.
            : 'text-slate-700 hover:bg-slate-100 hover:text-slate-900 dark:text-slate-300 dark:hover:bg-slate-700 dark:hover:text-white'
        ]}
      >
        {/* Desktop Icon Container */}
        {/* Icon colors change based on active state and hover, using group-hover */}
        <span class:list={[
            "transition-colors duration-150", // Smooth color transition
            // Conditional text color for the icon based on link state.
            active ? "text-blue-600 dark:text-blue-400" : "text-slate-400 group-hover:text-slate-500 dark:group-hover:text-slate-300"
        ]}>
            {/* Render the SVG icon markup defined in navLinks */}
            {link.icon ? <Fragment set:html={link.icon} /> : null}
        </span>
        {/* Display the link text */}
        <span>{link.text}</span>
      </a>
    );
  })}
</nav>

{/* Hamburger Menu Button (Mobile Only) */}
{/* Hidden on medium screens and up (md:hidden) */}
<button
  id="hamburger-button"
  type="button"
  aria-label="Toggle Menu"
  aria-controls="nav-links"
  aria-expanded="false"
  class="hamburger group relative cursor-pointer rounded-md p-2 text-slate-700 transition-colors duration-200 hover:bg-slate-100 focus:outline-none focus-visible:ring-2 focus-visible:ring-blue-500 dark:text-slate-300 dark:hover:bg-slate-700 dark:focus-visible:ring-blue-400 md:hidden"
>
  {/* Screen reader text provides context for the button's action. */}
  <span class="sr-only">Open main menu</span>
  {/* Container for the three lines of the hamburger icon */}
  <div class="space-y-1.5">
    {/* Top line: Animates into top part of 'X' when menu is open (aria-expanded="true") */}
    <span class="block h-0.5 w-6 transform rounded-full bg-current transition duration-300 ease-in-out group-aria-expanded:translate-y-[7px] group-aria-expanded:rotate-45" aria-hidden="true"></span>
    {/* Middle line: Fades out when menu is open */}
    <span class="block h-0.5 w-6 rounded-full bg-current transition duration-300 ease-in-out group-aria-expanded:opacity-0" aria-hidden="true"></span>
    {/* Bottom line: Animates into bottom part of 'X' when menu is open */}
    <span class="block h-0.5 w-6 transform rounded-full bg-current transition duration-300 ease-in-out group-aria-expanded:-translate-y-[7px] group-aria-expanded:-rotate-45" aria-hidden="true"></span>
  </div>
</button>

{/* CSS for Hamburger Animation controlled by aria-expanded state */}
{/* Styles directly target the spans within the button based on the button's state */}
<style>
  /* Top line animation when button has aria-expanded="true" */
  .group[aria-expanded="true"] .group-aria-expanded\:translate-y-\[7px\] {
    transform: translateY(7px) rotate(45deg); /* Move down and rotate */
  }
  /* Middle line animation when button has aria-expanded="true" */
   .group[aria-expanded="true"] .group-aria-expanded\:opacity-0 {
    opacity: 0; /* Fade out */
  }
  /* Bottom line animation when button has aria-expanded="true" */
   .group[aria-expanded="true"] .group-aria-expanded\:-translate-y-\[7px\] {
     transform: translateY(-7px) rotate(-45deg); /* Move up and rotate opposite */
  }

  /* Define the transition properties for the mobile navigation container */
  .nav-links {
      transition: opacity 0.3s ease-in-out, transform 0.3s ease-in-out;
  }
</style>